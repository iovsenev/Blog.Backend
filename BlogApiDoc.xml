<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Blog.Api</name>
    </assembly>
    <members>
        <member name="T:Blog.Api.Controllers.AccountController">
            <summary>
            Методы для регистрации пользователей и входа в систему.
            </summary>
        </member>
        <member name="M:Blog.Api.Controllers.AccountController.#ctor(Blog.Application.Mediators.IMediator)">
            <summary>
             
            </summary>
            <param name="mediator">Интерфейс паттерна посредник</param>
        </member>
        <member name="M:Blog.Api.Controllers.AccountController.Login(Blog.Application.Services.Account.Login.LoginUserCommand,System.Threading.CancellationToken)">
            <summary>
            Метод входа в систему. Возвращает JWT токен при успешном входе.
            </summary>
            <param name="command">Содержит Email и пароль пользователя</param>
            <param name="cancelationToken">Cancelation token</param>
            <returns>JWT bearer</returns>
        </member>
        <member name="M:Blog.Api.Controllers.AccountController.Register(Blog.Application.Services.Account.Register.RegisterUserCommand,System.Threading.CancellationToken)">
            <summary>
            Метод регистрации пользователя в системе возвращает JWT токен при успешной регистрации
            </summary>
            <param name="command">RegisterUserCommand содержит email и пароль обязательные поля, userName может быть пустым</param>
            <param name="cancelationToken">Cancelation token</param>
            <returns>JWT Bearer</returns>
        </member>
        <member name="T:Blog.Api.Controllers.ArticleController">
            <summary>
            Контроллер работы со статьями.
            </summary>
        </member>
        <member name="M:Blog.Api.Controllers.ArticleController.#ctor(Blog.Application.Mediators.IMediator)">
            <summary>
            
            </summary>
            <param name="mediator"></param>
        </member>
        <member name="M:Blog.Api.Controllers.ArticleController.GetAllPublished(Blog.Application.Services.Articles.Queries.GetAll.GetArticlesByPageQuery,System.Threading.CancellationToken)">
            <summary>
            Получения списка статей по страницам и общего числа статей.
            </summary>
            <param name="query">Запрос по страницам по умолчанию имеет значения pageIndex = 1 pageSize = 10</param>
            <param name="cancellationToken">Cancelation token</param>
            <returns>Список ArticleShortViewModel</returns>
        </member>
        <member name="M:Blog.Api.Controllers.ArticleController.GetById(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Получения одной статьи по уникальному идентификатору статьи
            </summary>
            <param name="id">Уникальный Id пользователя</param>
            <param name="cancelationToken">Cancellation Token</param>
            <returns>ArticleFullViewModel</returns>
        </member>
        <member name="T:Blog.Api.Controllers.UserController">
            <summary>
            
            </summary>
        </member>
        <member name="M:Blog.Api.Controllers.UserController.#ctor(Blog.Application.Mediators.IMediator)">
            <summary>
            
            </summary>
            <param name="mediator"></param>
        </member>
        <member name="M:Blog.Api.Controllers.UserController.GetAllAuthors(Blog.Application.Services.Users.Queries.GetByPage.GetUsersByPageQuery,System.Threading.CancellationToken)">
            <summary>
            Получение общего списка пользователь имеющих опубликованные статьи. 
            </summary>
            <param name="query">GetUserByPageQuery</param>
            <param name="token">CancelationToken</param>
            <returns>GetAllUsersByPageResponse</returns>
        </member>
        <member name="M:Blog.Api.Controllers.UserController.PostArticle(Blog.Application.Services.Users.Commands.CreateArticle.CreateArticleCommand,System.Threading.CancellationToken)">
            <summary>
            Создание статьи через пользователя 
            </summary>
            <param name="command"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Api.Controllers.UserController.GetById(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Получение статьи по Id
            </summary>
            <param name="id">Уникальный идентификатор статьи</param>
            <param name="cancelationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Api.Controllers.UserController.PostComment(Blog.Application.Services.Users.Commands.CreateComment.CreateCommentCommand,System.Threading.CancellationToken)">
            <summary>
            Создание комментария пользователя.
            </summary>
            <param name="command"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
    </members>
</doc>
